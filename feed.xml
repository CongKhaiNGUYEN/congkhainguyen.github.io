<feed xmlns="http://www.w3.org/2005/Atom"> <id>congkhainguyen.github.io/</id><title>Kaiba_404's Blog</title><subtitle>Personal blog, for writeups, own documentation and stuff.</subtitle> <updated>2023-03-24T02:19:59+01:00</updated> <author> <name>Cong Khai NGUYEN</name> <uri>congkhainguyen.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="congkhainguyen.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="congkhainguyen.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Cong Khai NGUYEN </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Welcome to Jekyll!</title><link href="congkhainguyen.github.io/posts/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-03-24T01:00:00+01:00</published> <updated>2023-03-24T01:00:00+01:00</updated> <id>congkhainguyen.github.io/posts/welcome-to-jekyll/</id> <content src="congkhainguyen.github.io/posts/welcome-to-jekyll/" /> <author> <name>Cong Khai NGUYEN</name> </author> <category term="jekyll" /> <category term="update" /> <summary> You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MAR... </summary> </entry> <entry><title>Reversing | CrackMe Packed</title><link href="congkhainguyen.github.io/ctf-like/reversing/crackme-packed" rel="alternate" type="text/html" title="Reversing | CrackMe Packed" /><published>2023-03-01T00:00:00+01:00</published> <updated>2023-03-01T23:07:02+01:00</updated> <id>congkhainguyen.github.io/ctf-like/reversing/crackme-packed</id> <content src="congkhainguyen.github.io/ctf-like/reversing/crackme-packed" /> <author> <name>Zeropio</name> </author> <category term="CTFlike" /> <category term="Reversing" /> <summary> This challenge is from Ricardo Narvaja! You can download it here. The objective is to find the real code execute inside the packer. Initial Analysis Opening the PE in x32dbg show the following EntryPoint: It’s a weird start that the executable start by pushad. In the Memory Map tab we can see the program start in the memory address 00401000: That direction seems to be empty: Let’s ... </summary> </entry> <entry><title>MalDev | Dropper Explorer.exe</title><link href="congkhainguyen.github.io/malware/development/dropper-explorer-1" rel="alternate" type="text/html" title="MalDev | Dropper Explorer.exe" /><published>2023-02-01T00:00:00+01:00</published> <updated>2023-02-16T13:19:31+01:00</updated> <id>congkhainguyen.github.io/malware/development/dropper-explorer-1</id> <content src="congkhainguyen.github.io/malware/development/dropper-explorer-1" /> <author> <name>Zeropio</name> </author> <category term="Malware" /> <category term="Development" /> <summary> From a Dropper.exe, it will extract a shellcode from the .rsrc and inject it into the Explorer.exe. For this we will need: The C++ file A Resource Script file A C/C++ Header A Python script for XOR encryption A shellcode (in this case MessageBox) Shellcode We already have a binary (msgbox64.bin) to use. With the following Python Script we can encrypt it: # Red Team Operator course... </summary> </entry> <entry><title>MalDev | Putty</title><link href="congkhainguyen.github.io/malware/development/putty-1" rel="alternate" type="text/html" title="MalDev | Putty" /><published>2023-01-29T00:00:00+01:00</published> <updated>2023-02-01T14:00:45+01:00</updated> <id>congkhainguyen.github.io/malware/development/putty-1</id> <content src="congkhainguyen.github.io/malware/development/putty-1" /> <author> <name>Zeropio</name> </author> <category term="Malware" /> <category term="Development" /> <summary> Enumeration First, debug a 32bit putty.exe in x32dbg. There is a inital breakpoint in the binary: Address=00454AD0 Module/Label/Exception=&amp;lt;putty.exe.EntryPoint&amp;gt; State=One-time Disassembly=push 60 Hits=0 Summary=entry breakpoint We need to find a code cave in the binary. The .text section it is executable: Address=00401000 Size=0005C000 Party=User Page Information=".text" Content of sec... </summary> </entry> <entry><title>HTB | Player</title><link href="congkhainguyen.github.io/pentesting/htb/machines/player" rel="alternate" type="text/html" title="HTB | Player" /><published>2023-01-05T00:00:00+01:00</published> <updated>2023-01-05T00:00:00+01:00</updated> <id>congkhainguyen.github.io/pentesting/htb/machines/player</id> <content src="congkhainguyen.github.io/pentesting/htb/machines/player" /> <author> <name>Zeropio</name> </author> <category term="Pentesting" /> <category term="HackTheBox" /> <summary> Fingerprint Scan The scan show: PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 1024 d730dbb9a04c79947838b343a2505581 (DSA) | 2048 372be431eea6490d9fe7e601e63e0a66 (RSA) | 256 0c6c05edadf175e802e4d2273e3a198f (ECDSA) |_ 256 11b8dbf3cc29084a49cebf917340a280 (ED25519) 80/tcp open http ... </summary> </entry> </feed>
